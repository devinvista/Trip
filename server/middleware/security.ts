// MIDDLEWARE DE SEGURAN√áA
// Prote√ß√µes adicionais para o servidor Express

import { Request, Response, NextFunction } from "express";

/**
 * Middleware que monitora tentativas de acesso a dados sens√≠veis
 */
export function securityMonitorMiddleware(req: Request, res: Response, next: NextFunction) {
  // Lista de endpoints sens√≠veis que devem ser monitorados
  const sensitiveEndpoints = [
    '/api/admin',
    '/api/database',
    '/api/config',
    '/api/env'
  ];

  // Verificar se √© uma tentativa de acesso a endpoint sens√≠vel
  const isSensitive = sensitiveEndpoints.some(endpoint => 
    req.path.toLowerCase().includes(endpoint.toLowerCase())
  );

  if (isSensitive) {
    console.warn(`üö® SEGURAN√áA: Tentativa de acesso a endpoint sens√≠vel: ${req.path} de IP: ${req.ip}`);
    
    // Bloquear acesso a endpoints administrativos n√£o autorizados
    return res.status(403).json({ 
      error: "Acesso negado - endpoint protegido",
      timestamp: new Date().toISOString()
    });
  }

  // Headers de seguran√ßa
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.setHeader('X-Frame-Options', 'DENY');
  res.setHeader('X-XSS-Protection', '1; mode=block');
  
  next();
}

/**
 * Middleware que bloqueia tentativas de manipula√ß√£o de vari√°veis de ambiente
 */
export function environmentProtectionMiddleware(req: Request, res: Response, next: NextFunction) {
  // Verificar se h√° tentativas de enviar dados relacionados a configura√ß√£o de banco
  const suspiciousPatterns = [
    'DATABASE_URL',
    'DB_HOST',
    'DB_PASSWORD',
    'CONNECTION_STRING',
    'MYSQL_',
    'POSTGRES_',
    'SQLITE_'
  ];

  const requestBody = JSON.stringify(req.body || {}).toLowerCase();
  const queryString = JSON.stringify(req.query || {}).toLowerCase();
  
  for (const pattern of suspiciousPatterns) {
    if (requestBody.includes(pattern.toLowerCase()) || queryString.includes(pattern.toLowerCase())) {
      console.error(`üö® SEGURAN√áA: Tentativa de manipular configura√ß√£o de banco detectada: ${pattern}`);
      
      return res.status(400).json({
        error: "Requisi√ß√£o bloqueada - dados sens√≠veis detectados",
        timestamp: new Date().toISOString()
      });
    }
  }

  next();
}

/**
 * Middleware que registra todas as requisi√ß√µes para auditoria
 */
export function auditLogMiddleware(req: Request, res: Response, next: NextFunction) {
  const logData = {
    timestamp: new Date().toISOString(),
    method: req.method,
    path: req.path,
    ip: req.ip,
    userAgent: req.get('User-Agent'),
    referer: req.get('Referer')
  };

  // Log de auditoria (pode ser expandido para salvar em arquivo)
  if (req.path.startsWith('/api/')) {
    console.log(`üìä AUDITORIA: ${JSON.stringify(logData)}`);
  }

  next();
}