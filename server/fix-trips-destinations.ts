import { db } from './db.js';
import { activities, trips } from '../shared/schema.js';
import { eq } from 'drizzle-orm';

// Defini√ß√µes de destinos baseados nos t√≠tulos das viagens
const TRIP_DESTINATIONS = {
  'Rio de Janeiro Completo': 'Rio de Janeiro, RJ',
  'S√£o Paulo Gastron√¥mico': 'S√£o Paulo, SP',
  'Aventura no Pantanal': 'Pantanal, MT',
  'Carnaval em Salvador': 'Salvador, BA',
  'Trilha na Serra da Mantiqueira': 'Serra da Mantiqueira, MG',
  'Praias de Maragogi': 'Maragogi, AL',
  'Cultura em Ouro Preto': 'Ouro Preto, MG',
  'Amaz√¥nia - Manaus': 'Manaus, AM',
  'Surf em Florian√≥polis': 'Florian√≥polis, SC',
  'Vin√≠colas na Serra Ga√∫cha': 'Serra Ga√∫cha, RS',
  'Len√ß√≥is Maranhenses': 'Len√ß√≥is Maranhenses, MA',
  'Festa Junina em Caruaru': 'Caruaru, PE',
  'R√©veillon em Copacabana': 'Rio de Janeiro, RJ',
  'Patag√¥nia Argentina': 'El Calafate, Argentina',
  'Machu Picchu': 'Cusco, Peru',
  'Saf√°ri no Qu√™nia': 'Nairobi, Qu√™nia'
};

async function fixTripsDestinations() {
  try {
    console.log('üîÑ CORRIGINDO DESTINOS DAS VIAGENS...\n');
    
    // Buscar todas as viagens
    const allTrips = await db.select().from(trips);
    console.log(`üìä Total de viagens encontradas: ${allTrips.length}`);
    
    // Mostrar t√≠tulos atuais
    console.log('\nüìù T√çTULOS DAS VIAGENS:');
    allTrips.forEach(trip => {
      console.log(`  ID ${trip.id}: "${trip.title}" ‚Üí destination: "${trip.destination}"`);
    });
    
    // Aplicar corre√ß√µes
    console.log('\nüîß APLICANDO CORRE√á√ïES DE DESTINOS...');
    let updatedCount = 0;
    
    for (const trip of allTrips) {
      // Buscar destino baseado no t√≠tulo
      let newDestination = null;
      
      // Busca exata primeiro
      if (TRIP_DESTINATIONS[trip.title]) {
        newDestination = TRIP_DESTINATIONS[trip.title];
      } else {
        // Busca por palavras-chave no t√≠tulo
        const title = trip.title.toLowerCase();
        if (title.includes('rio de janeiro') || title.includes('copacabana')) {
          newDestination = 'Rio de Janeiro, RJ';
        } else if (title.includes('s√£o paulo')) {
          newDestination = 'S√£o Paulo, SP';
        } else if (title.includes('pantanal')) {
          newDestination = 'Pantanal, MT';
        } else if (title.includes('salvador')) {
          newDestination = 'Salvador, BA';
        } else if (title.includes('mantiqueira')) {
          newDestination = 'Serra da Mantiqueira, MG';
        } else if (title.includes('maragogi')) {
          newDestination = 'Maragogi, AL';
        } else if (title.includes('ouro preto')) {
          newDestination = 'Ouro Preto, MG';
        } else if (title.includes('manaus') || title.includes('amaz√¥nia')) {
          newDestination = 'Manaus, AM';
        } else if (title.includes('florian√≥polis')) {
          newDestination = 'Florian√≥polis, SC';
        } else if (title.includes('serra ga√∫cha') || title.includes('gramado')) {
          newDestination = 'Serra Ga√∫cha, RS';
        } else if (title.includes('len√ß√≥is maranhenses')) {
          newDestination = 'Len√ß√≥is Maranhenses, MA';
        } else if (title.includes('caruaru')) {
          newDestination = 'Caruaru, PE';
        } else if (title.includes('patag√¥nia')) {
          newDestination = 'El Calafate, Argentina';
        } else if (title.includes('machu picchu')) {
          newDestination = 'Cusco, Peru';
        } else if (title.includes('qu√™nia') || title.includes('saf√°ri')) {
          newDestination = 'Nairobi, Qu√™nia';
        } else if (title.includes('bonito')) {
          newDestination = 'Bonito, MS';
        } else if (title.includes('paris')) {
          newDestination = 'Paris, Fran√ßa';
        } else if (title.includes('nova york')) {
          newDestination = 'Nova York, EUA';
        } else if (title.includes('londres')) {
          newDestination = 'Londres, Reino Unido';
        } else if (title.includes('roma')) {
          newDestination = 'Roma, It√°lia';
        } else if (title.includes('buenos aires')) {
          newDestination = 'Buenos Aires, Argentina';
        } else {
          // Fallback baseado em padr√µes comuns
          newDestination = 'Rio de Janeiro, RJ'; // padr√£o
        }
      }
      
      if (newDestination && (trip.destination === undefined || trip.destination === null || trip.destination === 'undefined' || trip.destination !== newDestination)) {
        console.log(`  Atualizando viagem "${trip.title}" ‚Üí "${newDestination}"`);
        try {
          await db.update(trips)
            .set({ destination: newDestination })
            .where(eq(trips.id, trip.id));
          updatedCount++;
        } catch (updateError) {
          console.error(`    Erro ao atualizar viagem ${trip.id}:`, updateError);
        }
      }
    }
    
    console.log(`\n‚úÖ Corre√ß√£o conclu√≠da! ${updatedCount} viagens atualizadas.`);
    
    // Verificar resultado
    console.log('\nüîç VERIFICANDO RESULTADO...');
    const updatedTrips = await db.select().from(trips);
    const allActivities = await db.select().from(activities);
    
    const tripDestinations = [...new Set(updatedTrips.map(t => t.destination))].filter(Boolean);
    const activityLocations = [...new Set(allActivities.map(a => a.location))].filter(Boolean);
    
    console.log('\nüìç DESTINOS DAS VIAGENS (ap√≥s corre√ß√£o):');
    tripDestinations.forEach(dest => {
      const count = updatedTrips.filter(t => t.destination === dest).length;
      console.log(`  - "${dest}" (${count} viagens)`);
    });
    
    console.log('\nüèõÔ∏è LOCALIZA√á√ïES DAS ATIVIDADES:');
    activityLocations.forEach(loc => {
      const count = allActivities.filter(a => a.location === loc).length;
      console.log(`  - "${loc}" (${count} atividades)`);
    });
    
    const matched = activityLocations.filter(loc => tripDestinations.includes(loc));
    const unmatched = activityLocations.filter(loc => !tripDestinations.includes(loc));
    
    console.log(`\n‚úÖ Localiza√ß√µes correspondentes: ${matched.length}`);
    matched.forEach(loc => console.log(`  ‚úì "${loc}"`));
    
    console.log(`\n‚ùå Localiza√ß√µes sem correspond√™ncia: ${unmatched.length}`);
    unmatched.forEach(loc => console.log(`  ‚úó "${loc}"`));
    
    // Destinos sem atividades
    const destinationsWithoutActivities = tripDestinations.filter(dest => !activityLocations.includes(dest));
    console.log(`\nüö® DESTINOS SEM ATIVIDADES (${destinationsWithoutActivities.length}):`);
    destinationsWithoutActivities.forEach(dest => {
      const tripCount = updatedTrips.filter(t => t.destination === dest).length;
      console.log(`  - "${dest}" (${tripCount} viagens)`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro durante corre√ß√£o:', error);
  }
  
  process.exit(0);
}

fixTripsDestinations();