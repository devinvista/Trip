import { db } from './db.js';
import { sql } from 'drizzle-orm';

async function createActivityReviews() {
  console.log('‚≠ê Criando avalia√ß√µes real√≠sticas para todas as atividades...');

  try {
    // Obter todas as atividades e usu√°rios
    const activities = await db.execute(sql`SELECT id, title FROM activities`);
    const users = await db.execute(sql`SELECT id, username FROM users`);
    
    console.log(`üìä Encontradas ${activities.length} atividades e ${users.length} usu√°rios`);

    // Limpar avalia√ß√µes existentes (se houver)
    await db.execute(sql`DELETE FROM activity_reviews`);

    let totalReviews = 0;

    // Coment√°rios real√≠sticos para as avalia√ß√µes
    const reviewComments = [
      'Experi√™ncia incr√≠vel! Superou todas as expectativas. Recomendo muito!',
      'Muito bom, mas poderia ser um pouco melhor organizado.',
      'Perfeito! Vista sensacional e atendimento excelente.',
      'Legal, mas achei um pouco caro para o que oferece.',
      'Fant√°stico! Uma das melhores experi√™ncias que j√° tive.',
      'Boa atividade, mas estava muito cheio no dia.',
      'Maravilhoso! Vale cada centavo. Voltaria com certeza.',
      'Interessante, mas esperava mais. Talvez seja melhor em outra √©poca.',
      'Simplesmente espetacular! N√£o h√° palavras para descrever.',
      'Gostei, mas o tempo da atividade foi um pouco corrido.',
      'Incr√≠vel! A vista √© de tirar o f√¥lego. Recomendo ir no p√¥r do sol.',
      'Muito bem organizado e o guia foi excelente. Valeu muito a pena!',
      'Atividade boa, mas o pre√ßo est√° meio salgado para o que oferece.',
      'Adorei! Foi uma das melhores partes da minha viagem.',
      'Experi√™ncia √∫nica! Definitivamente algo que todos deveriam fazer.'
    ];

    for (const activity of activities) {
      console.log(`üí¨ Criando avalia√ß√µes para: ${activity.title}`);
      
      // Criar entre 2 a 6 avalia√ß√µes por atividade
      const numReviews = Math.floor(Math.random() * 5) + 2;
      const shuffledUsers = [...users].sort(() => Math.random() - 0.5);
      
      for (let i = 0; i < Math.min(numReviews, shuffledUsers.length); i++) {
        const user = shuffledUsers[i];
        const rating = Math.floor(Math.random() * 2) + 4; // Rating entre 4 e 5 (mais real√≠stico)
        const comment = reviewComments[Math.floor(Math.random() * reviewComments.length)];
        const helpfulVotes = Math.floor(Math.random() * 25) + 1;
        const isVerified = Math.random() > 0.25; // 75% verificadas
        
        // Data de visita aleat√≥ria nos √∫ltimos 6 meses
        const visitDate = new Date();
        visitDate.setDate(visitDate.getDate() - Math.floor(Math.random() * 180));
        const visitDateStr = visitDate.toISOString().split('T')[0];
        
        try {
          await db.execute(sql`
            INSERT INTO activity_reviews (
              activity_id, user_id, rating, comment, visit_date, 
              is_verified, helpful_votes, is_hidden
            ) VALUES (
              ${activity.id},
              ${user.id},
              ${rating},
              ${comment},
              ${visitDateStr},
              ${isVerified},
              ${helpfulVotes},
              false
            )
          `);
          totalReviews++;
        } catch (error) {
          // Ignora erro de usu√°rio duplicado avaliando a mesma atividade
          if (!error.message.includes('Duplicate entry')) {
            console.error(`Erro ao criar avalia√ß√£o: ${error.message}`);
          }
        }
      }
    }

    console.log(`‚úÖ ${totalReviews} avalia√ß√µes criadas com sucesso!`);

    // Atualizar as m√©dias de rating das atividades
    console.log('üìä Atualizando m√©dias de rating...');
    await updateActivityRatings();

  } catch (error) {
    console.error('‚ùå Erro ao criar avalia√ß√µes:', error);
    throw error;
  }
}

async function updateActivityRatings() {
  // Atualizar a m√©dia de rating e total de avalia√ß√µes para cada atividade
  await db.execute(sql`
    UPDATE activities a
    SET 
      average_rating = (
        SELECT COALESCE(AVG(r.rating), 0)
        FROM activity_reviews r 
        WHERE r.activity_id = a.id AND r.is_hidden = FALSE
      ),
      total_ratings = (
        SELECT COUNT(*)
        FROM activity_reviews r 
        WHERE r.activity_id = a.id AND r.is_hidden = FALSE
      )
  `);
  
  console.log('‚úÖ M√©dias de rating atualizadas!');
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  createActivityReviews()
    .then(() => {
      console.log('‚úÖ Cria√ß√£o de avalia√ß√µes conclu√≠da!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erro no processo:', error);
      process.exit(1);
    });
}