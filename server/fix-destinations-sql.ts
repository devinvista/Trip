import { db } from './db.js';

async function fixDestinationsWithSQL() {
  try {
    console.log('üîÑ CORRIGINDO DESTINOS DAS VIAGENS COM SQL DIRETO...\n');
    
    // Definir as corre√ß√µes por t√≠tulo
    const corrections = [
      { title: 'Rio de Janeiro Completo', destination: 'Rio de Janeiro, RJ' },
      { title: 'S√£o Paulo Gastron√¥mico', destination: 'S√£o Paulo, SP' },
      { title: 'Aventura no Pantanal', destination: 'Pantanal, MT' },
      { title: 'Carnaval em Salvador', destination: 'Salvador, BA' },
      { title: 'Trilha na Serra da Mantiqueira', destination: 'Serra da Mantiqueira, MG' },
      { title: 'Praias de Maragogi', destination: 'Maragogi, AL' },
      { title: 'Cultura em Ouro Preto', destination: 'Ouro Preto, MG' },
      { title: 'Amaz√¥nia - Manaus', destination: 'Manaus, AM' },
      { title: 'Surf em Florian√≥polis', destination: 'Florian√≥polis, SC' },
      { title: 'Vin√≠colas na Serra Ga√∫cha', destination: 'Serra Ga√∫cha, RS' },
      { title: 'Len√ß√≥is Maranhenses', destination: 'Len√ß√≥is Maranhenses, MA' },
      { title: 'Festa Junina em Caruaru', destination: 'Caruaru, PE' },
      { title: 'R√©veillon em Copacabana', destination: 'Rio de Janeiro, RJ' },
      { title: 'Patag√¥nia Argentina', destination: 'El Calafate, Argentina' },
      { title: 'Machu Picchu', destination: 'Cusco, Peru' },
      { title: 'Saf√°ri no Qu√™nia', destination: 'Nairobi, Qu√™nia' }
    ];
    
    let updatedCount = 0;
    
    for (const correction of corrections) {
      console.log(`  Atualizando "${correction.title}" ‚Üí "${correction.destination}"`);
      
      const result = await db.execute(`
        UPDATE trips 
        SET destination = ? 
        WHERE title = ?
      `, [correction.destination, correction.title]);
      
      updatedCount += (result as any).affectedRows || 0;
    }
    
    console.log(`\n‚úÖ Corre√ß√£o conclu√≠da! ${updatedCount} viagens atualizadas.`);
    
    // Verificar resultado
    console.log('\nüîç VERIFICANDO RESULTADO...');
    
    const tripsResult = await db.execute('SELECT DISTINCT destination FROM trips WHERE destination IS NOT NULL ORDER BY destination');
    const activitiesResult = await db.execute('SELECT DISTINCT location FROM activities WHERE location IS NOT NULL ORDER BY location');
    
    const tripDestinations = (tripsResult as any).map((row: any) => row.destination);
    const activityLocations = (activitiesResult as any).map((row: any) => row.location);
    
    console.log('\nüìç DESTINOS DAS VIAGENS (ap√≥s corre√ß√£o):');
    for (const dest of tripDestinations) {
      const countResult = await db.execute('SELECT COUNT(*) as count FROM trips WHERE destination = ?', [dest]);
      const count = (countResult as any)[0].count;
      console.log(`  - "${dest}" (${count} viagens)`);
    }
    
    console.log('\nüèõÔ∏è LOCALIZA√á√ïES DAS ATIVIDADES:');
    for (const loc of activityLocations) {
      const countResult = await db.execute('SELECT COUNT(*) as count FROM activities WHERE location = ?', [loc]);
      const count = (countResult as any)[0].count;
      console.log(`  - "${loc}" (${count} atividades)`);
    }
    
    const matched = activityLocations.filter(loc => tripDestinations.includes(loc));
    const unmatched = activityLocations.filter(loc => !tripDestinations.includes(loc));
    
    console.log(`\n‚úÖ Localiza√ß√µes correspondentes: ${matched.length}`);
    matched.forEach(loc => console.log(`  ‚úì "${loc}"`));
    
    console.log(`\n‚ùå Localiza√ß√µes sem correspond√™ncia: ${unmatched.length}`);
    unmatched.forEach(loc => console.log(`  ‚úó "${loc}"`));
    
    // Destinos sem atividades
    const destinationsWithoutActivities = tripDestinations.filter(dest => !activityLocations.includes(dest));
    console.log(`\nüö® DESTINOS SEM ATIVIDADES (${destinationsWithoutActivities.length}):`);
    destinationsWithoutActivities.forEach(dest => console.log(`  - "${dest}"`));
    
  } catch (error) {
    console.error('‚ùå Erro durante corre√ß√£o:', error);
  }
  
  process.exit(0);
}

fixDestinationsWithSQL();