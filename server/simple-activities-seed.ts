import { db } from './db.js';
import { sql } from 'drizzle-orm';

export async function seedBasicActivities() {
  console.log('üå± Adicionando dados b√°sicos de atividades...');

  try {
    // 1. Verificar a estrutura das tabelas existentes
    console.log('üîç Verificando estrutura das tabelas...');
    
    const activityColumns = await db.execute(sql`SHOW COLUMNS FROM activities`);
    console.log('üìã Colunas de activities:', activityColumns.map(c => c.Field).join(', '));

    let proposalColumns = [];
    try {
      proposalColumns = await db.execute(sql`SHOW COLUMNS FROM activity_budget_proposals`);
      console.log('üìã Colunas de propostas:', proposalColumns.map(c => c.Field).join(', '));
    } catch (error) {
      console.log('‚ö†Ô∏è Tabela activity_budget_proposals n√£o existe ainda');
    }

    let reviewColumns = [];
    try {
      reviewColumns = await db.execute(sql`SHOW COLUMNS FROM activity_reviews`);
      console.log('üìã Colunas de reviews:', reviewColumns.map(c => c.Field).join(', '));
    } catch (error) {
      console.log('‚ö†Ô∏è Tabela activity_reviews n√£o existe ainda');
    }

    // 2. Verificar atividades existentes
    const activities = await db.execute(sql`SELECT id, title FROM activities WHERE title IS NOT NULL`);
    console.log(`üìä Atividades encontradas: ${activities.length}`);
    
    activities.forEach(activity => {
      console.log(`   - ID ${activity.id}: ${activity.title}`);
    });

    // 3. Criar propostas de or√ßamento apenas com colunas que existem
    if (proposalColumns.length > 0) {
      console.log('\nüí∞ Criando propostas de or√ßamento...');
      await seedBudgetProposals();
    } else {
      console.log('‚ö†Ô∏è Tabela de propostas n√£o existe, pulando essa etapa');
    }

    // 4. Criar avalia√ß√µes apenas com colunas que existem
    if (reviewColumns.length > 0) {
      console.log('\n‚≠ê Criando avalia√ß√µes...');
      await seedActivityReviews();
    } else {
      console.log('‚ö†Ô∏è Tabela de reviews n√£o existe, pulando essa etapa');
    }

    console.log('\nüéâ Seed b√°sico conclu√≠do com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro no seed b√°sico:', error);
    throw error;
  }
}

async function seedBudgetProposals() {
  try {
    // Verificar se j√° existem propostas
    const existingProposals = await db.execute(sql`SELECT COUNT(*) as count FROM activity_budget_proposals`);
    console.log(`üìä Propostas existentes: ${existingProposals[0]?.count || 0}`);

    // Limpar propostas existentes
    await db.execute(sql`DELETE FROM activity_budget_proposals`);

    // Obter atividades v√°lidas
    const activities = await db.execute(sql`
      SELECT id, title FROM activities 
      WHERE id IN (9, 10, 11, 12, 13, 14) AND title IS NOT NULL
    `);

    if (activities.length === 0) {
      console.log('‚ö†Ô∏è Nenhuma atividade v√°lida encontrada para criar propostas');
      return;
    }

    // Criar propostas b√°sicas (sem colunas votes e is_popular se n√£o existirem)
    const proposalColumns = await db.execute(sql`SHOW COLUMNS FROM activity_budget_proposals`);
    const hasVotes = proposalColumns.some(c => c.Field === 'votes');
    const hasIsPopular = proposalColumns.some(c => c.Field === 'is_popular');

    for (const activity of activities) {
      console.log(`üí° Criando propostas para: ${activity.title}`);
      
      // Propostas b√°sicas para cada atividade
      const basePrice = 80;
      const proposals = [
        {
          title: 'Op√ß√£o B√°sica',
          description: 'Experi√™ncia padr√£o da atividade',
          amount: basePrice,
          inclusions: '["Atividade principal", "Equipamentos b√°sicos"]',
          exclusions: '["Alimenta√ß√£o", "Bebidas"]'
        },
        {
          title: 'Op√ß√£o Completa',
          description: 'Experi√™ncia com guia e comodidades',
          amount: Math.floor(basePrice * 1.8),
          inclusions: '["Atividade principal", "Guia especializado", "Equipamentos"]',
          exclusions: '["Bebidas alco√≥licas"]'
        },
        {
          title: 'Op√ß√£o Premium',
          description: 'Experi√™ncia exclusiva e personalizada',
          amount: Math.floor(basePrice * 3),
          inclusions: '["Experi√™ncia privativa", "Guia exclusivo", "Transporte"]',
          exclusions: '["Compras pessoais"]'
        }
      ];

      for (const proposal of proposals) {
        if (hasVotes && hasIsPopular) {
          await db.execute(sql`
            INSERT INTO activity_budget_proposals 
            (activity_id, title, description, amount, currency, inclusions, exclusions, votes, is_popular) 
            VALUES 
            (${activity.id}, ${proposal.title}, ${proposal.description}, ${proposal.amount}, 'BRL', 
             ${proposal.inclusions}, ${proposal.exclusions}, 15, false)
          `);
        } else {
          await db.execute(sql`
            INSERT INTO activity_budget_proposals 
            (activity_id, title, description, amount, currency, inclusions, exclusions) 
            VALUES 
            (${activity.id}, ${proposal.title}, ${proposal.description}, ${proposal.amount}, 'BRL', 
             ${proposal.inclusions}, ${proposal.exclusions})
          `);
        }
      }
    }

    console.log('‚úÖ Propostas de or√ßamento criadas!');

  } catch (error) {
    console.error('‚ùå Erro ao criar propostas:', error);
  }
}

async function seedActivityReviews() {
  try {
    // Verificar se j√° existem reviews
    const existingReviews = await db.execute(sql`SELECT COUNT(*) as count FROM activity_reviews`);
    console.log(`üìä Reviews existentes: ${existingReviews[0]?.count || 0}`);

    // Limpar reviews existentes
    await db.execute(sql`DELETE FROM activity_reviews`);

    // Obter usu√°rios e atividades
    const users = await db.execute(sql`SELECT id, username FROM users LIMIT 3`);
    const activities = await db.execute(sql`
      SELECT id, title FROM activities 
      WHERE id IN (9, 10, 11, 12, 13, 14) AND title IS NOT NULL
    `);

    if (users.length === 0 || activities.length === 0) {
      console.log('‚ö†Ô∏è N√£o h√° usu√°rios ou atividades suficientes para criar reviews');
      return;
    }

    console.log(`üë• Usu√°rios: ${users.length}, üéØ Atividades: ${activities.length}`);

    // Coment√°rios real√≠sticos
    const comments = [
      'Experi√™ncia incr√≠vel! Superou todas as expectativas.',
      'Muito bom, mas poderia ser melhor organizado.',
      'Perfeito! Vista sensacional e atendimento excelente.',
      'Fant√°stico! Uma das melhores experi√™ncias que j√° tive.',
      'Maravilhoso! Vale cada centavo.',
      'Simplesmente espetacular!'
    ];

    // Criar reviews para cada atividade
    for (const activity of activities) {
      console.log(`üí¨ Criando reviews para: ${activity.title}`);
      
      // Criar 1-2 reviews por atividade
      const numReviews = Math.min(2, users.length);
      
      for (let i = 0; i < numReviews; i++) {
        const user = users[i];
        const rating = Math.floor(Math.random() * 2) + 4; // 4 ou 5
        const comment = comments[Math.floor(Math.random() * comments.length)];
        
        // Data de visita nos √∫ltimos 3 meses
        const visitDate = new Date();
        visitDate.setDate(visitDate.getDate() - Math.floor(Math.random() * 90));
        const visitDateStr = visitDate.toISOString().split('T')[0];

        try {
          await db.execute(sql`
            INSERT INTO activity_reviews 
            (activity_id, user_id, rating, comment, visit_date, is_verified, helpful_votes) 
            VALUES 
            (${activity.id}, ${user.id}, ${rating}, ${comment}, ${visitDateStr}, true, ${Math.floor(Math.random() * 15) + 1})
          `);
        } catch (error) {
          // Ignora duplicatas
          if (!error.message.includes('Duplicate entry')) {
            console.error(`Erro ao criar review: ${error.message}`);
          }
        }
      }
    }

    // Atualizar m√©dias de rating
    console.log('üìä Atualizando m√©dias de rating...');
    await db.execute(sql`
      UPDATE activities a
      SET 
        average_rating = COALESCE((
          SELECT AVG(r.rating)
          FROM activity_reviews r 
          WHERE r.activity_id = a.id AND r.is_hidden = FALSE
        ), 0),
        total_ratings = COALESCE((
          SELECT COUNT(*)
          FROM activity_reviews r 
          WHERE r.activity_id = a.id AND r.is_hidden = FALSE
        ), 0)
    `);

    console.log('‚úÖ Reviews e m√©dias criadas!');

  } catch (error) {
    console.error('‚ùå Erro ao criar reviews:', error);
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  seedBasicActivities()
    .then(() => {
      console.log('‚úÖ Seed b√°sico conclu√≠do!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erro no seed:', error);
      process.exit(1);
    });
}